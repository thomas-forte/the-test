{"version":3,"file":"component---src-pages-index-js-a9b2b875fb18cb68ccb9.js","mappings":"uKAwCA,MArCe,QAAC,SAAEA,GAAU,SAC1B,gCACE,uBAAKC,MAAM,oCACT,uBAAKA,MAAM,aACT,gBAAC,KAAI,CAACC,GAAG,IAAIC,UAAU,gBAAc,SAGrC,0BACEF,MAAM,iBACNG,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,qBAEX,wBAAMH,MAAM,yBAEd,uBAAKA,MAAM,2BAA2BI,GAAG,0BACvC,sBAAIJ,MAAM,mCACR,sBAAIA,MAAM,YACR,gBAAC,KAAI,CAACC,GAAG,QAAQC,UAAU,WAAWG,gBAAgB,UAAQ,SAIhE,sBAAIL,MAAM,YACR,gBAAC,KAAI,CAACC,GAAG,WAAWC,UAAU,WAAWG,gBAAgB,UAAQ,mBAQ1E,EC1BL,MAPe,QAAC,SAAEN,GAAU,SAC1B,gCACE,gBAAC,EAAM,MACP,wBAAMC,MAAM,kBAAkBD,GAC7B,C,+CC6BL,IA3BA,SAAa,GAAmC,IAAD,MAAlC,YAAEO,EAAW,MAAEC,EAAK,SAAER,GAAU,EAC3C,MAAM,KAAES,IAASC,EAAAA,EAAAA,IAAe,YAc1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBJ,MAExC,OACE,gCACE,6BAAQK,EAAkBL,EAAK,MAAMK,EAAiBL,GACtD,wBAAMM,KAAK,cAAcC,QAASJ,IACjCX,EAGP,C,yIC5BA,MAAMgB,EAAO,IAAsB,IAAhBC,KAAKC,SAAiB,GA4E5BC,EAAO,IAAM,gBAAC,IAAG,CAACX,MAAM,SAErC,MA5EkB,IAChB,gBAAC,IAAM,KACL,sBAAIL,UCTW,8BDSa,UAClB,IACR,8BACE,iCACQ,IAAG,WAGf,2BACA,yBACE,wBAAMA,UCnBO,8BDmBiB,KAAS,gpBAWzC,idASA,0BACE,mCACA,uCACA,mCACA,0CACA,qCACA,wCACA,wCACA,wCACA,wCACA,mCACA,oCACA,sCAEF,kSAImD,gCAAU,qpBAW7D,yCACA,gBAAC,KAAI,CAACD,GAAKc,IAAmB,WAAV,SAClB,0BAAQf,MAAM,OAAOG,KAAK,UAAQ,mBAIpC,gBAAC,KAAI,CAACF,GAAKc,IAAmB,WAAV,SAClB,0BAAQf,MAAM,OAAOG,KAAK,UAAQ,6B","sources":["webpack://the-company/./src/components/Header.js","webpack://the-company/./src/components/layout.js","webpack://the-company/./src/components/seo.js","webpack://the-company/./src/pages/index.js","webpack://the-company/./src/pages/index.module.css"],"sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst Header = ({ children }) => (\n  <>\n    <nav class=\"navbar navbar-expand-lg bg-light\">\n      <div class=\"container\">\n        <Link to=\"/\" className=\"navbar-brand\">\n          Test?\n        </Link>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li class=\"nav-item\">\n              <Link to=\"/test\" className=\"nav-link\" activeClassName=\"active\">\n                Test\n              </Link>\n            </li>\n            <li class=\"nav-item\">\n              <Link to=\"/failure\" className=\"nav-link\" activeClassName=\"active\">\n                Not a Test\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  </>\n);\n\nexport default Header;\n","import * as React from \"react\";\n\nimport Header from \"./Header\";\n\nconst Layout = ({ children }) => (\n  <>\n    <Header></Header>\n    <main class=\"container mt-3\">{children}</main>\n  </>\n);\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport * as styles from \"./index.module.css\";\n\nconst rand = () => Math.random() * 100 > 90;\n\nconst IndexPage = () => (\n  <Layout>\n    <h1 className={styles.title}>\n      This is{\" \"}\n      <strike>\n        <i>not</i>\n      </strike>{\" \"}\n      a test.\n    </h1>\n    <hr />\n    <p>\n      <span className={styles.fancy}>D</span>o not be alarmed, dear friend, for\n      this is merely a test. That is to say that we are only testing this and\n      not actually doing it. Therefore, there is absolutely no cause for concern\n      of any kind. We could just as easily be doing the actual thing now if we\n      so wished, for that would be just as easy as conducting a test. But we're\n      not. And of course if we were attempting it for real, we would be certain\n      to do so properly and not in such an experimental manner. For the real\n      thing is serious and should not be taken so lightly, as it may be confused\n      with being just a test, and that could be dangerous. But alas, this is not\n      real, for it is only a test.\n    </p>\n    <p>\n      You, as a person who may or may not within his or her daily life encounter\n      a test (not unlike the aforementioned and currently-ongoing test), may\n      hear alternative terms used to reference a test. The use of these\n      unfamiliar words may evoke a sense that something is indeed actually going\n      to happen soon. However, it would be wise to remember that a test by any\n      other name is still a test. A non-exhaustive list of test synonyms\n      includes:\n    </p>\n    <ul>\n      <li>Trial</li>\n      <li>Trial run</li>\n      <li>Drill</li>\n      <li>Practice run</li>\n      <li>Dry run</li>\n      <li>Experiment</li>\n      <li>Assessment</li>\n      <li>Inspection</li>\n      <li>Evaluation</li>\n      <li>Check</li>\n      <li>Tryout</li>\n      <li>Inquest</li>\n    </ul>\n    <p>\n      Should you encounter one of the above-stated expressions, it is\n      exceedingly likely that you have, are currently, or are soon to experience\n      what most experts would agree qualifies as a test. That is, unless it has\n      been specified that said experience is, in fact, <i>not</i> a test. In\n      that case, one would be reasonably justified in assuming that it is, as\n      stated, not a test. Although, it is also possible that it was specified as\n      not being a test in order to deceive those participating in the test into\n      believing such, when in reality, it is a test and the testees are being\n      tested after all. It is even possible that said test is testing the\n      testees on their knowledge of and capacity for distinguishing between\n      non-tests and tests. In some extenuating circumstances, it may even be\n      possible that the testees are actually testers testing their tester's\n      testee-testing tests. But that's uncommon, and again, this is not a test.\n    </p>\n    <p>...or is it?</p>\n    <Link to={!rand() ? \"/test\" : \"/failure\"}>\n      <button class=\"me-2\" type=\"button\">\n        Take the test!\n      </button>\n    </Link>\n    <Link to={!rand() ? \"/test\" : \"/failure\"}>\n      <button class=\"me-2\" type=\"button\">\n        Don't not take the test!\n      </button>\n    </Link>\n  </Layout>\n);\n\nexport const Head = () => <Seo title=\"Home\" />;\n\nexport default IndexPage;\n","// extracted by mini-css-extract-plugin\nexport var fancy = \"index-module--fancy--507b8\";\nexport var title = \"index-module--title--16c47\";"],"names":["children","class","to","className","type","id","activeClassName","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","rand","Math","random","Head"],"sourceRoot":""}